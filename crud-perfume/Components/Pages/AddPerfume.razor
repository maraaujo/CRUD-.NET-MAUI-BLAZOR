@using crud_perfume.Models
@using crud_perfume.Database
@inject NavigationManager navigation;
@page "/addPerfume"

<h3>Adicionar Perfume</h3>

<EditForm Model="perfume" OnValidSubmit="Create">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row">
        <div class="col-md-6">
            <div class="form-group">
                <label class="control-label">Nome</label>
                <InputText class="form-control" @bind-Value="perfume.Nome" />
                <ValidationMessage For="@(() => perfume.Nome)" />
            </div>
        </div>

        <div class="col-md-6">
            <div class="form-group">
                <label class="control-label">Volume</label>
                <InputText class="form-control" @bind-Value="perfume.double.Parse(Volume)" />
                <ValidationMessage For="@(() => perfume.Volume)" />
            </div>
        </div>
    </div>

    <div class="form-group mt-4">
        <button type="submit" class="btn btn-primary">Salvar perfume</button>
        <a href="/list" class="btn btn-danger">Voltar à lista</a>
    </div>
</EditForm>

@code {
    [SupplyParameterFromForm]
    private Perfume perfume = new();

    [Inject]
    public DbContext Db { get; set; }

    protected async Task Create()
    {
        var ret = await App.Database.CreateAsync<Perfume>(perfume);
        if(ret > 0)
        {
            await App.Current.MainPage.DisplayAlert("Sucesso", "Perfume adicionado com sucesso!", "OK");
            navigation.NavigateTo("/list");

        }
        else await App.Current.MainPage.DisplayAlert("Oops!", "Ocorreu algum erro! Tente novamente", "OK"); 
        navigation.NavigateTo("/list");

    }

    [Inject]
    private NavigationManager NavigationManager { get; set; }
}
